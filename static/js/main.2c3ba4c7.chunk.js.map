{"version":3,"sources":["components/GlobalStyles.js","animation.js","api.js","components/Image.js","components/ImageList.js","pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStyles","createGlobalStyle","popup","hidden","opacity","scale","show","transition","duration","ease","exit","delay","getImage","city","count","a","axios","get","process","params","page","response","data","console","error","Container","styled","motion","div","Image","imageURL","description","photographer","AnimatePresence","variants","initial","animate","src","alt","className","ImageList","useState","images","setImages","setCount","getData","counter","results","useEffect","dataLength","length","next","hasMore","loader","columnsCountBreakPoints","350","750","900","map","item","urls","regular","alt_description","user","name","id","cities","Wrapper","Title","Home","setCity","isOpen","setIsOpen","cityHandler","e","target","innerText","y","index","onClick","h2","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c3ba4c7.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n*{\r\n    margin:0;\r\n    padding:0;\r\n    box-sizing: border-box;\r\n}\r\nhtml{\r\n    &::-webkit-scrollbar{\r\n        width: 0.5rem;\r\n    }\r\n    &::-webkit-scrollbar-thumb {\r\n        background-color:darkgrey;\r\n    }\r\n    &::-webkit-scrollbar-track {\r\n    background-color: white;\r\n  }\r\n}\r\n\r\nbody{\r\n/*     width:100%; */\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: rgb(248, 241, 227);\r\n}\r\nh2{\r\n    font-size:5rem;\r\n    font-weight:lighter;\r\n    color:#333;\r\n    font-family: 'Girassol', cursive;\r\n}\r\nh3{\r\n    font-size:1.3rem;\r\n    color: #333;\r\n    padding:1.5rem 0rem;\r\n}\r\np{\r\n    font-size:1.2rem;\r\n    line-height:200%;\r\n    color:#696969;\r\n}\r\na{\r\n    text-decoration:none;\r\n    color: #333;\r\n}\r\nimg{\r\n    display:block;\r\n}\r\ninput{\r\n    font-weight: bold;\r\n}\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","export const popup = {\r\n  hidden: {\r\n    opacity: 0,\r\n    scale: 0.5,\r\n  },\r\n  show: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    transition: {\r\n      duration: 0.75,\r\n      ease: \"easeOut\",\r\n    },\r\n  },\r\n  exit: {\r\n    opacity: 0,\r\n    scale: 0,\r\n    transition: { ease: \"easeOut\", duration: 0.5, delay: 0.25 },\r\n  },\r\n};\r\n\r\nexport const titleAnimation = {\r\n  hidden: {\r\n    opacity: 0,\r\n    y: -100,\r\n  },\r\n  show: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    transition: {\r\n      duration: 0.75,\r\n    },\r\n  },\r\n  exit: {\r\n    opacity: 0,\r\n    scale: 0,\r\n    transition: { ease: \"easeOut\", duration: 0.5 },\r\n  },\r\n};\r\n","import axios from \"axios\";\r\n\r\n/* //Base URl\r\nconst accessKey = process.env.REACT_APP_API_KEY;\r\n//const base_url = `https://api.unsplash.com/photos/?client_id=${accessKey}`;\r\nconst getImage = async (city, count) => {\r\n  try {\r\n    //const response = await axios.get(base_url);\r\n    const response = await axios.get(\r\n      `https://api.unsplash.com//search/photos?page=${count}`,\r\n      {\r\n        params: { query: city },\r\n        headers: {\r\n          Authorization: `Client-ID ${accessKey}`,\r\n        },\r\n      }\r\n    );\r\n    return response.data.results;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}; */\r\n\r\n//connecting to AWS Lambda function\r\nconst base_url = process.env.REACT_APP_AWS_API;\r\nconst getImage = async (city, count) => {\r\n  try {\r\n    //const response = await axios.get(base_url);\r\n    const response = await axios.get(base_url, {\r\n      params: { city: city, page: count },\r\n    });\r\n\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nexport default getImage;\r\n","//styles\r\nimport styled from \"styled-components\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { popup } from \"../animation\";\r\n\r\nconst Image = ({ imageURL, description, photographer }) => {\r\n  return (\r\n    <AnimatePresence>\r\n      <Container variants={popup} initial=\"hidden\" animate=\"show\" exit=\"exit\">\r\n        <img src={imageURL} alt={description || \"toronto\"} />\r\n        <div className=\"overlay\">\r\n          <div className=\"details\">\r\n            <p>{description}</p>\r\n            <p>Posted by: {photographer}</p>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\nconst Container = styled(motion.div)`\r\n  position: relative;\r\n  text-align: left;\r\n  margin: 1em;\r\n  img {\r\n    background-color: #eee;\r\n    display: block;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  .overlay {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 10;\r\n    right: 0;\r\n    height: 0;\r\n    width: 100%;\r\n    opacity: 0;\r\n    transition: 0.5s ease;\r\n    background: linear-gradient(\r\n      to bottom,\r\n      rgba(255, 255, 255, 0.7) 0%,\r\n      rgba(255, 255, 255, 0.7) 50%,\r\n      rgb(255, 255, 255, 0.7) calc(50%)\r\n    );\r\n    .details {\r\n      position: absolute;\r\n      top: 8px;\r\n      left: 20px;\r\n      color: black;\r\n      font-weight: bold;\r\n      overflow-y: hidden;\r\n    }\r\n    p {\r\n      margin-bottom: 1rem;\r\n    }\r\n  }\r\n\r\n  &:hover .overlay {\r\n    opacity: 1;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport default Image;\r\n","import { useEffect, useState } from \"react\";\r\nimport getImage from \"../api\";\r\nimport Image from \"./Image\";\r\n//styles\r\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst ImageList = ({ city }) => {\r\n  const [images, setImages] = useState([]);\r\n  const [count, setCount] = useState(1);\r\n\r\n  const getData = async (counter) => {\r\n    const results = await getImage(city, counter);\r\n\r\n    setImages((images) => [...images, ...results]);\r\n    setCount((count) => count + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setImages([]);\r\n    setCount(1);\r\n    let counter = 1;\r\n    getData(counter);\r\n  }, [city]);\r\n  return (\r\n    <div>\r\n      <InfiniteScroll\r\n        dataLength={images.length} //This is important field to render the next data\r\n        next={() => {\r\n          getData(count);\r\n        }}\r\n        hasMore={true}\r\n        loader={<h4>Loading...</h4>}\r\n      >\r\n        <ResponsiveMasonry columnsCountBreakPoints={{ 350: 1, 750: 2, 900: 3 }}>\r\n          <Masonry>\r\n            {images.length > 0 &&\r\n              images.map((item) => (\r\n                <Image\r\n                  imageURL={item.urls.regular}\r\n                  description={item.alt_description}\r\n                  key={item.id}\r\n                  photographer={item.user.name}\r\n                />\r\n              ))}\r\n          </Masonry>\r\n        </ResponsiveMasonry>\r\n      </InfiniteScroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageList;\r\n","import React, { useState } from \"react\";\r\n\r\n//styles\r\nimport styled from \"styled-components\";\r\nimport { motion } from \"framer-motion\";\r\nimport { popup } from \"../animation\";\r\n\r\nimport ImageList from \"../components/ImageList\";\r\n\r\nconst cities = [\r\n  \"Toronto\",\r\n  \"Ottawa\",\r\n  \"Montreal\",\r\n  \"Quebec\",\r\n  /*   \"Fredericton\", */\r\n  /*   \"Charlottetown\", */\r\n  \"Halifax\",\r\n  \"St. John's\",\r\n  \"Winnipeg\",\r\n  \"Regina\",\r\n  \"Edmonton\",\r\n  \"Calgary\",\r\n  \"Vancouver\",\r\n  \"Victoria\",\r\n  \"Yellowknife\",\r\n  \"Whitehorse\",\r\n  \"Iqaluit\",\r\n];\r\n\r\nconst Home = () => {\r\n  const [city, setCity] = useState(\"Toronto\");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const cityHandler = (e) => {\r\n    setIsOpen(!isOpen);\r\n    setCity(e.target.innerText);\r\n  };\r\n\r\n  const toggling = () => setIsOpen(!isOpen);\r\n  return (\r\n    <Wrapper>\r\n      <Title variants={popup} initial=\"hidden\" animate=\"show\" exit=\"exit\">\r\n        {!isOpen ? (\r\n          <motion.h2\r\n            initial={{ opacity: 0, y: -100 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{\r\n              opacity: 0,\r\n              y: 100,\r\n              transition: {\r\n                delay: 0.25,\r\n                duration: 0.25,\r\n              },\r\n            }}\r\n            onClick={toggling}\r\n          >\r\n            {city}\r\n          </motion.h2>\r\n        ) : (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: -100 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{\r\n              opacity: 0,\r\n              y: 100,\r\n              transition: {\r\n                delay: 0.25,\r\n                duration: 0.25,\r\n              },\r\n            }}\r\n          >\r\n            <ul>\r\n              {cities.map((city, index) => (\r\n                <li onClick={cityHandler} key={index}>\r\n                  {city}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </motion.div>\r\n        )}\r\n      </Title>\r\n      <div className={isOpen ? \"list__opacity\" : \"\"}>\r\n        <ImageList city={city} />\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled(motion.div)`\r\n  max-width: 1500px;\r\n  margin: auto;\r\n  overflow-y: hidden;\r\n  text-align: -webkit-center;\r\n  text-align: -moz-center;\r\n  .list__opacity {\r\n    display: none;\r\n    /*     transition: all 0.5s ease-out; */\r\n  }\r\n`;\r\n\r\nconst Title = styled(motion.div)`\r\n  padding: 2rem 0rem;\r\n  width: min-content;\r\n  display: flex;\r\n  align-items: center;\r\n  h2 {\r\n    letter-spacing: 0.2rem;\r\n    cursor: pointer;\r\n    width: min-content;\r\n    user-select: none;\r\n  }\r\n\r\n  ul {\r\n    height: 100%;\r\n    font-size: 2.5em;\r\n    padding: 0rem 1rem;\r\n    list-style: none;\r\n    &::-webkit-scrollbar {\r\n      width: 0.5rem;\r\n    }\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: darkgrey;\r\n    }\r\n    &::-webkit-scrollbar-track {\r\n      background-color: white;\r\n    }\r\n\r\n    li {\r\n      user-select: none;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n  //font-size: 10rem;\r\n  @media screen and (max-width: 650px) {\r\n    h2 {\r\n      font-size: 3.5rem;\r\n    }\r\n    ul {\r\n      font-size: 1.5rem;\r\n    }\r\n  }\r\n  @media screen and (max-width: 470px) {\r\n    h2 {\r\n      font-size: 2.7rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Home;\r\n","//styles\r\nimport GlobalStyles from \"./components/GlobalStyles\";\r\n//pages and components\r\nimport Home from \"./pages/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GlobalStyles />\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}